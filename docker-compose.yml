

services:
  
  client:
    build:
      context: ./Client
      dockerfile: dockerfile.client
    ports:
      - "5173:5173"  
      - "4173:4173"  
    restart: unless-stopped
    environment:
      - VITE_AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - VITE_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - VITE_AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - VITE_API_URL=http://server:8000
      - VITE_AUTH0_CALLBACK_URL=http://localhost:5173/callback
      - VITE_AUTH0_LOGOUT_URL=http://localhost:5173
    networks:
      - f_brain_network
    depends_on:
      - server

  
  server:
    build:
      context: ./server
      dockerfile: dockerfile.server
    ports:
      - "8000:8000"
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8000
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_URL=postgres://postgres:${DB_PASSWORD}@db:5432/${DB_NAME}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
    depends_on:
      - db
    networks:
      - f_brain_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  
  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - f_brain_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  
  monitoring:
    build:
      context: ./Monitoring
      dockerfile: dockerfile.moni
    ports:
      - "9090:9090"  
      - "3000:3000"  
    networks:
      - f_brain_network
    depends_on:
      - server
      - db

  # --- NGINX Reverse Proxy ---
  proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./proxy/certs:/etc/nginx/certs
    depends_on:
      - client
      - server
      - monitoring
    networks:
      - f_brain_network

# --- Volumes ---
volumes:
  pgdata:
    driver: local

# --- RÃ©seaux ---
networks:
  f_brain_network:
    driver: bridge